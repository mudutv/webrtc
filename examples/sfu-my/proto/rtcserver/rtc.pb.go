// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rtc.proto

package rtcserver

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PeerInfo struct {
	PeerId               string   `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	StreamKey            string   `protobuf:"bytes,2,opt,name=stream_key,json=streamKey,proto3" json:"stream_key,omitempty"`
	Video                bool     `protobuf:"varint,3,opt,name=video,proto3" json:"video,omitempty"`
	Audio                bool     `protobuf:"varint,4,opt,name=audio,proto3" json:"audio,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerInfo) Reset()         { *m = PeerInfo{} }
func (m *PeerInfo) String() string { return proto.CompactTextString(m) }
func (*PeerInfo) ProtoMessage()    {}
func (*PeerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_85bd91e80f756774, []int{0}
}

func (m *PeerInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerInfo.Unmarshal(m, b)
}
func (m *PeerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerInfo.Marshal(b, m, deterministic)
}
func (m *PeerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerInfo.Merge(m, src)
}
func (m *PeerInfo) XXX_Size() int {
	return xxx_messageInfo_PeerInfo.Size(m)
}
func (m *PeerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PeerInfo proto.InternalMessageInfo

func (m *PeerInfo) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func (m *PeerInfo) GetStreamKey() string {
	if m != nil {
		return m.StreamKey
	}
	return ""
}

func (m *PeerInfo) GetVideo() bool {
	if m != nil {
		return m.Video
	}
	return false
}

func (m *PeerInfo) GetAudio() bool {
	if m != nil {
		return m.Audio
	}
	return false
}

type ConfigInfo struct {
	PeerId               string   `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Bitrate              uint32   `protobuf:"varint,2,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	Videocodec           string   `protobuf:"bytes,3,opt,name=videocodec,proto3" json:"videocodec,omitempty"`
	HasAudio             bool     `protobuf:"varint,4,opt,name=has_audio,json=hasAudio,proto3" json:"has_audio,omitempty"`
	HasVideo             bool     `protobuf:"varint,5,opt,name=has_video,json=hasVideo,proto3" json:"has_video,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigInfo) Reset()         { *m = ConfigInfo{} }
func (m *ConfigInfo) String() string { return proto.CompactTextString(m) }
func (*ConfigInfo) ProtoMessage()    {}
func (*ConfigInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_85bd91e80f756774, []int{1}
}

func (m *ConfigInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigInfo.Unmarshal(m, b)
}
func (m *ConfigInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigInfo.Marshal(b, m, deterministic)
}
func (m *ConfigInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigInfo.Merge(m, src)
}
func (m *ConfigInfo) XXX_Size() int {
	return xxx_messageInfo_ConfigInfo.Size(m)
}
func (m *ConfigInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigInfo proto.InternalMessageInfo

func (m *ConfigInfo) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func (m *ConfigInfo) GetBitrate() uint32 {
	if m != nil {
		return m.Bitrate
	}
	return 0
}

func (m *ConfigInfo) GetVideocodec() string {
	if m != nil {
		return m.Videocodec
	}
	return ""
}

func (m *ConfigInfo) GetHasAudio() bool {
	if m != nil {
		return m.HasAudio
	}
	return false
}

func (m *ConfigInfo) GetHasVideo() bool {
	if m != nil {
		return m.HasVideo
	}
	return false
}

type SdpData struct {
	PeerId               string   `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	StreamKey            string   `protobuf:"bytes,2,opt,name=stream_key,json=streamKey,proto3" json:"stream_key,omitempty"`
	Sdp                  string   `protobuf:"bytes,3,opt,name=sdp,proto3" json:"sdp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SdpData) Reset()         { *m = SdpData{} }
func (m *SdpData) String() string { return proto.CompactTextString(m) }
func (*SdpData) ProtoMessage()    {}
func (*SdpData) Descriptor() ([]byte, []int) {
	return fileDescriptor_85bd91e80f756774, []int{2}
}

func (m *SdpData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SdpData.Unmarshal(m, b)
}
func (m *SdpData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SdpData.Marshal(b, m, deterministic)
}
func (m *SdpData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SdpData.Merge(m, src)
}
func (m *SdpData) XXX_Size() int {
	return xxx_messageInfo_SdpData.Size(m)
}
func (m *SdpData) XXX_DiscardUnknown() {
	xxx_messageInfo_SdpData.DiscardUnknown(m)
}

var xxx_messageInfo_SdpData proto.InternalMessageInfo

func (m *SdpData) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func (m *SdpData) GetStreamKey() string {
	if m != nil {
		return m.StreamKey
	}
	return ""
}

func (m *SdpData) GetSdp() string {
	if m != nil {
		return m.Sdp
	}
	return ""
}

type CandidateData struct {
	PeerId               string   `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Candidate            string   `protobuf:"bytes,2,opt,name=candidate,proto3" json:"candidate,omitempty"`
	SdpMid               string   `protobuf:"bytes,3,opt,name=sdp_mid,json=sdpMid,proto3" json:"sdp_mid,omitempty"`
	SdpMlineIndex        int32    `protobuf:"varint,4,opt,name=sdp_mline_index,json=sdpMlineIndex,proto3" json:"sdp_mline_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CandidateData) Reset()         { *m = CandidateData{} }
func (m *CandidateData) String() string { return proto.CompactTextString(m) }
func (*CandidateData) ProtoMessage()    {}
func (*CandidateData) Descriptor() ([]byte, []int) {
	return fileDescriptor_85bd91e80f756774, []int{3}
}

func (m *CandidateData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CandidateData.Unmarshal(m, b)
}
func (m *CandidateData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CandidateData.Marshal(b, m, deterministic)
}
func (m *CandidateData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CandidateData.Merge(m, src)
}
func (m *CandidateData) XXX_Size() int {
	return xxx_messageInfo_CandidateData.Size(m)
}
func (m *CandidateData) XXX_DiscardUnknown() {
	xxx_messageInfo_CandidateData.DiscardUnknown(m)
}

var xxx_messageInfo_CandidateData proto.InternalMessageInfo

func (m *CandidateData) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func (m *CandidateData) GetCandidate() string {
	if m != nil {
		return m.Candidate
	}
	return ""
}

func (m *CandidateData) GetSdpMid() string {
	if m != nil {
		return m.SdpMid
	}
	return ""
}

func (m *CandidateData) GetSdpMlineIndex() int32 {
	if m != nil {
		return m.SdpMlineIndex
	}
	return 0
}

type ReplyInfo struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Errmsg               string   `protobuf:"bytes,2,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyInfo) Reset()         { *m = ReplyInfo{} }
func (m *ReplyInfo) String() string { return proto.CompactTextString(m) }
func (*ReplyInfo) ProtoMessage()    {}
func (*ReplyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_85bd91e80f756774, []int{4}
}

func (m *ReplyInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplyInfo.Unmarshal(m, b)
}
func (m *ReplyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplyInfo.Marshal(b, m, deterministic)
}
func (m *ReplyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyInfo.Merge(m, src)
}
func (m *ReplyInfo) XXX_Size() int {
	return xxx_messageInfo_ReplyInfo.Size(m)
}
func (m *ReplyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyInfo proto.InternalMessageInfo

func (m *ReplyInfo) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *ReplyInfo) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func init() {
	proto.RegisterType((*PeerInfo)(nil), "rtcserver.PeerInfo")
	proto.RegisterType((*ConfigInfo)(nil), "rtcserver.ConfigInfo")
	proto.RegisterType((*SdpData)(nil), "rtcserver.SdpData")
	proto.RegisterType((*CandidateData)(nil), "rtcserver.CandidateData")
	proto.RegisterType((*ReplyInfo)(nil), "rtcserver.ReplyInfo")
}

func init() { proto.RegisterFile("rtc.proto", fileDescriptor_85bd91e80f756774) }

var fileDescriptor_85bd91e80f756774 = []byte{
	// 447 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xcb, 0x6e, 0xd4, 0x30,
	0x14, 0x25, 0x0c, 0xf3, 0xf0, 0x65, 0x46, 0x20, 0x53, 0x20, 0xe2, 0xa5, 0x2a, 0x0b, 0xd4, 0xd5,
	0x2c, 0x60, 0x53, 0x0a, 0x0b, 0xaa, 0x81, 0x45, 0x84, 0x10, 0x95, 0x23, 0xb1, 0x8d, 0xdc, 0xf8,
	0xa6, 0xb5, 0xc8, 0xd8, 0x91, 0xed, 0x96, 0xe6, 0x0b, 0xf8, 0x06, 0x3e, 0x84, 0xff, 0x43, 0x76,
	0x1e, 0x64, 0x33, 0x95, 0x86, 0x9d, 0xcf, 0xb9, 0x8f, 0x73, 0x7c, 0xaf, 0x0d, 0xc4, 0xb8, 0x62,
	0x5d, 0x1b, 0xed, 0x34, 0xf5, 0x47, 0x8b, 0xe6, 0x1a, 0x4d, 0xa2, 0x60, 0x71, 0x86, 0x68, 0x52,
	0x55, 0x6a, 0xfa, 0x14, 0xe6, 0x35, 0xa2, 0xc9, 0xa5, 0x88, 0xa3, 0xc3, 0xe8, 0x88, 0xb0, 0x99,
	0x87, 0xa9, 0xa0, 0x2f, 0x01, 0xac, 0x33, 0xc8, 0xb7, 0xf9, 0x0f, 0x6c, 0xe2, 0xbb, 0x21, 0x46,
	0x5a, 0xe6, 0x0b, 0x36, 0xf4, 0x00, 0xa6, 0xd7, 0x52, 0xa0, 0x8e, 0x27, 0x87, 0xd1, 0xd1, 0x82,
	0xb5, 0xc0, 0xb3, 0xfc, 0x4a, 0x48, 0x1d, 0xdf, 0x6b, 0xd9, 0x00, 0x92, 0xdf, 0x11, 0xc0, 0x46,
	0xab, 0x52, 0x5e, 0xdc, 0x2e, 0x19, 0xc3, 0xfc, 0x5c, 0x3a, 0xc3, 0x1d, 0x06, 0xbd, 0x15, 0xeb,
	0x21, 0x7d, 0x05, 0x10, 0x04, 0x0a, 0x2d, 0xb0, 0x08, 0x92, 0x84, 0x8d, 0x18, 0xfa, 0x1c, 0xc8,
	0x25, 0xb7, 0xf9, 0x58, 0x7b, 0x71, 0xc9, 0xed, 0xa9, 0xc7, 0x7d, 0xb0, 0xb5, 0x3b, 0x1d, 0x82,
	0xdf, 0x3d, 0x4e, 0x32, 0x98, 0x67, 0xa2, 0xfe, 0xc4, 0x1d, 0xff, 0xef, 0x51, 0x3c, 0x84, 0x89,
	0x15, 0x75, 0xe7, 0xca, 0x1f, 0x93, 0x5f, 0x11, 0xac, 0x36, 0x5c, 0x09, 0x29, 0xb8, 0xc3, 0xdb,
	0x7b, 0xbf, 0x00, 0x52, 0xf4, 0x99, 0x7d, 0xeb, 0x81, 0xf0, 0x65, 0x56, 0xd4, 0xf9, 0x56, 0x8a,
	0xae, 0xfd, 0xcc, 0x8a, 0xfa, 0xab, 0x14, 0xf4, 0x35, 0x3c, 0x08, 0x81, 0x4a, 0x2a, 0xcc, 0xa5,
	0x12, 0x78, 0x13, 0xae, 0x3d, 0x65, 0x2b, 0x9f, 0xe0, 0xd9, 0xd4, 0x93, 0xc9, 0x7b, 0x20, 0x0c,
	0xeb, 0xaa, 0x09, 0x83, 0x7f, 0x02, 0x33, 0x83, 0xf6, 0xaa, 0x72, 0xc1, 0xc3, 0x82, 0x75, 0xc8,
	0xf3, 0x68, 0xcc, 0xd6, 0x5e, 0x74, 0x06, 0x3a, 0xf4, 0xe6, 0xcf, 0x04, 0x96, 0xcc, 0x15, 0xa9,
	0x72, 0x68, 0x4a, 0x5e, 0x20, 0x3d, 0x01, 0x92, 0xa1, 0x6b, 0x57, 0x49, 0x1f, 0xaf, 0x87, 0x17,
	0xb5, 0xfe, 0xb7, 0xdd, 0x67, 0x07, 0x23, 0x7a, 0x90, 0x4e, 0xee, 0xd0, 0x77, 0x70, 0x7f, 0x63,
	0x90, 0x3b, 0xfc, 0x56, 0x96, 0x68, 0x28, 0x1d, 0xa5, 0x75, 0x0b, 0xd8, 0x59, 0xfa, 0x11, 0x96,
	0x5e, 0x76, 0x98, 0x4a, 0x3c, 0x56, 0x1e, 0x8f, 0x79, 0x67, 0x87, 0x63, 0x20, 0x99, 0xe3, 0xc6,
	0x9d, 0x55, 0xbc, 0xa1, 0x8f, 0x46, 0x49, 0xfd, 0x3f, 0xd8, 0x59, 0x79, 0x02, 0xcb, 0xd6, 0xf6,
	0xa9, 0xb2, 0x3f, 0xf7, 0xf4, 0x7d, 0x0c, 0x64, 0x53, 0x69, 0x8b, 0x5e, 0x64, 0x3f, 0xd5, 0x0f,
	0xb0, 0x4a, 0xed, 0xe7, 0x1b, 0x69, 0x5d, 0x16, 0x9e, 0xd9, 0x5e, 0xd5, 0xe7, 0xb3, 0xf0, 0xe3,
	0xdf, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x9c, 0xa3, 0xa5, 0xa4, 0xfe, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RtcInterfaceClient is the client API for RtcInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RtcInterfaceClient interface {
	SetConfig(ctx context.Context, in *ConfigInfo, opts ...grpc.CallOption) (*ReplyInfo, error)
	CreateOffer(ctx context.Context, in *SdpData, opts ...grpc.CallOption) (*ReplyInfo, error)
	SetCandidate(ctx context.Context, in *CandidateData, opts ...grpc.CallOption) (*ReplyInfo, error)
	StartPlay(ctx context.Context, in *PeerInfo, opts ...grpc.CallOption) (*ReplyInfo, error)
	CreateAnswer(ctx context.Context, in *SdpData, opts ...grpc.CallOption) (*ReplyInfo, error)
	ClosePeer(ctx context.Context, in *PeerInfo, opts ...grpc.CallOption) (*ReplyInfo, error)
	IsExistStream(ctx context.Context, in *PeerInfo, opts ...grpc.CallOption) (*ReplyInfo, error)
}

type rtcInterfaceClient struct {
	cc *grpc.ClientConn
}

func NewRtcInterfaceClient(cc *grpc.ClientConn) RtcInterfaceClient {
	return &rtcInterfaceClient{cc}
}

func (c *rtcInterfaceClient) SetConfig(ctx context.Context, in *ConfigInfo, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := c.cc.Invoke(ctx, "/rtcserver.RtcInterface/SetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rtcInterfaceClient) CreateOffer(ctx context.Context, in *SdpData, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := c.cc.Invoke(ctx, "/rtcserver.RtcInterface/CreateOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rtcInterfaceClient) SetCandidate(ctx context.Context, in *CandidateData, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := c.cc.Invoke(ctx, "/rtcserver.RtcInterface/SetCandidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rtcInterfaceClient) StartPlay(ctx context.Context, in *PeerInfo, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := c.cc.Invoke(ctx, "/rtcserver.RtcInterface/StartPlay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rtcInterfaceClient) CreateAnswer(ctx context.Context, in *SdpData, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := c.cc.Invoke(ctx, "/rtcserver.RtcInterface/CreateAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rtcInterfaceClient) ClosePeer(ctx context.Context, in *PeerInfo, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := c.cc.Invoke(ctx, "/rtcserver.RtcInterface/ClosePeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rtcInterfaceClient) IsExistStream(ctx context.Context, in *PeerInfo, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := c.cc.Invoke(ctx, "/rtcserver.RtcInterface/IsExistStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RtcInterfaceServer is the server API for RtcInterface service.
type RtcInterfaceServer interface {
	SetConfig(context.Context, *ConfigInfo) (*ReplyInfo, error)
	CreateOffer(context.Context, *SdpData) (*ReplyInfo, error)
	SetCandidate(context.Context, *CandidateData) (*ReplyInfo, error)
	StartPlay(context.Context, *PeerInfo) (*ReplyInfo, error)
	CreateAnswer(context.Context, *SdpData) (*ReplyInfo, error)
	ClosePeer(context.Context, *PeerInfo) (*ReplyInfo, error)
	IsExistStream(context.Context, *PeerInfo) (*ReplyInfo, error)
}

// UnimplementedRtcInterfaceServer can be embedded to have forward compatible implementations.
type UnimplementedRtcInterfaceServer struct {
}

func (*UnimplementedRtcInterfaceServer) SetConfig(ctx context.Context, req *ConfigInfo) (*ReplyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (*UnimplementedRtcInterfaceServer) CreateOffer(ctx context.Context, req *SdpData) (*ReplyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOffer not implemented")
}
func (*UnimplementedRtcInterfaceServer) SetCandidate(ctx context.Context, req *CandidateData) (*ReplyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCandidate not implemented")
}
func (*UnimplementedRtcInterfaceServer) StartPlay(ctx context.Context, req *PeerInfo) (*ReplyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPlay not implemented")
}
func (*UnimplementedRtcInterfaceServer) CreateAnswer(ctx context.Context, req *SdpData) (*ReplyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnswer not implemented")
}
func (*UnimplementedRtcInterfaceServer) ClosePeer(ctx context.Context, req *PeerInfo) (*ReplyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClosePeer not implemented")
}
func (*UnimplementedRtcInterfaceServer) IsExistStream(ctx context.Context, req *PeerInfo) (*ReplyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsExistStream not implemented")
}

func RegisterRtcInterfaceServer(s *grpc.Server, srv RtcInterfaceServer) {
	s.RegisterService(&_RtcInterface_serviceDesc, srv)
}

func _RtcInterface_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RtcInterfaceServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rtcserver.RtcInterface/SetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RtcInterfaceServer).SetConfig(ctx, req.(*ConfigInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RtcInterface_CreateOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdpData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RtcInterfaceServer).CreateOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rtcserver.RtcInterface/CreateOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RtcInterfaceServer).CreateOffer(ctx, req.(*SdpData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RtcInterface_SetCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CandidateData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RtcInterfaceServer).SetCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rtcserver.RtcInterface/SetCandidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RtcInterfaceServer).SetCandidate(ctx, req.(*CandidateData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RtcInterface_StartPlay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RtcInterfaceServer).StartPlay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rtcserver.RtcInterface/StartPlay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RtcInterfaceServer).StartPlay(ctx, req.(*PeerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RtcInterface_CreateAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdpData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RtcInterfaceServer).CreateAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rtcserver.RtcInterface/CreateAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RtcInterfaceServer).CreateAnswer(ctx, req.(*SdpData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RtcInterface_ClosePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RtcInterfaceServer).ClosePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rtcserver.RtcInterface/ClosePeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RtcInterfaceServer).ClosePeer(ctx, req.(*PeerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RtcInterface_IsExistStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RtcInterfaceServer).IsExistStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rtcserver.RtcInterface/IsExistStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RtcInterfaceServer).IsExistStream(ctx, req.(*PeerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _RtcInterface_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rtcserver.RtcInterface",
	HandlerType: (*RtcInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetConfig",
			Handler:    _RtcInterface_SetConfig_Handler,
		},
		{
			MethodName: "CreateOffer",
			Handler:    _RtcInterface_CreateOffer_Handler,
		},
		{
			MethodName: "SetCandidate",
			Handler:    _RtcInterface_SetCandidate_Handler,
		},
		{
			MethodName: "StartPlay",
			Handler:    _RtcInterface_StartPlay_Handler,
		},
		{
			MethodName: "CreateAnswer",
			Handler:    _RtcInterface_CreateAnswer_Handler,
		},
		{
			MethodName: "ClosePeer",
			Handler:    _RtcInterface_ClosePeer_Handler,
		},
		{
			MethodName: "IsExistStream",
			Handler:    _RtcInterface_IsExistStream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rtc.proto",
}
